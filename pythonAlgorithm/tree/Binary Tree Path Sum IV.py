class Solution:
    """
    @param nums: a list of integers
    @return: return an integer
    如果一个树的深度小于5，那么这个树可以用一个三位整数的列表表示。

对于列表中的每一个整数：

百位数表示当前节点的深度D，1 <= D <= 4。
十位数表示当前节点在当前层的位置P，1 <= P <= 8。这个位置相当于是在它在满二叉树中的位置。
个位数表示当前节点的值V，0 <= V <= 9。
给定一个升序的三位整数的列表，它表示一个深度小于5的二叉树。你需要返回从根结点到叶子节点的所有路径的和。

Example
样例 1:

输入: [113, 215, 221]
输出: 12
解释:
  这个列表代表的树是:
    3
   / \
  5   1
  路径和为 (3 + 5) + (3 + 1) = 12.
样例 2:

输入: [113, 221]
输出: 4
解释:
  这个列表代表的树是:
    3
     \
      1
  路径和为 3 + 1 = 4.
    """

    def pathSum(self, nums):
        # write your code here
        pass
