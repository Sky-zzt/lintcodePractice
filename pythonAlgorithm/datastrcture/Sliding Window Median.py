class Solution:
    """
    @param nums: A list of integers
    @param k: An integer
    @return: The median of the element inside the window at each moving

    给定一个包含 n 个整数的数组，和一个大小为 k 的滑动窗口,从左到右在数组中滑动这个窗口，找到数组中每个窗口内的中位数。(如果数组个数是偶数，则在该窗口排序数字后，返回第 N/2 个数字。)

Example
样例 1:

输入:
[1,2,7,8,5]
3
输出:
[2,7,7]

解释:
最初，窗口的数组是这样的：`[ | 1,2,7 | ,8,5]` , 返回中位数 `2`;
接着，窗口继续向前滑动一次。`[1, | 2,7,8 | ,5]`, 返回中位数 `7`;
接着，窗口继续向前滑动一次。`[1,2, | 7,8,5 | ]`, 返回中位数 `7`;
样例 2:

输入:
[1,2,3,4,5,6,7]
4
输出:
[2,3,4,5]

解释:
最初，窗口数组是这样的：`[ | 1,2,3,4, | 5,6,7]` , 返回中位数 `2`;
接着，窗口向前滑动一次.`[1,| 2,3,4,5 | 6,7]`,返回中位数 `3`;
接着，窗口向前滑动一次.`[1,2, | 3,4,5,6 | 7 ]`, 返回中位数 `4`;
接着，窗口向前滑动一次`[1,2,3,| 4,5,6,7 ]`, 返回中位数 `5`;
Challenge
时间复杂度为 O(nlog(n))


    """

    def medianSlidingWindow(self, nums, k):
        # write your code here
        pass
